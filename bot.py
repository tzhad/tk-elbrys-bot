import os
import logging
import requests
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler, ContextTypes, filters

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
BITRIX_WEBHOOK_URL = os.getenv("BITRIX_WEBHOOK_URL")

NAME, CARGO, DIMENSIONS, ROUTE, CONTACT = range(5)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    reply_keyboard = [["–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É"]]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!\n\n"
        "–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    ) 
    return NAME

async def name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–∑–µ:", reply_markup=ReplyKeyboardRemove())
    return CARGO

async def cargo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["cargo"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≥–∞–±–∞—Ä–∏—Ç—ã –≥—Ä—É–∑–∞ (–¥–ª–∏–Ω–∞, —à–∏—Ä–∏–Ω–∞, –≤—ã—Å–æ—Ç–∞, –≤–µ—Å):")
    return DIMENSIONS

async def dimensions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["dimensions"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç (–æ—Ç–∫—É–¥–∞ ‚Üí –∫—É–¥–∞):")
    return ROUTE

async def route(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["route"] = update.message.text
    await update.message.reply_text("–û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ Telegram –¥–ª—è —Å–≤—è–∑–∏:")
    return CONTACT

async def contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["contact"] = update.message.text
    user_data = context.user_data

    tg_user = update.message.from_user
    tg_name = f"{tg_user.first_name or ''} {tg_user.last_name or ''}".strip()
    tg_username = f"@{tg_user.username}" if tg_user.username else "‚Äî"
    user_data["tg_name"] = tg_name
    user_data["tg_username"] = tg_username

    message = (
        f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É üöö\n\n"
        f"–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {user_data['name']}\n"
        f"Telegram: {tg_name} ({tg_username})\n"
        f"–ì—Ä—É–∑: {user_data['cargo']}\n"
        f"–ì–∞–±–∞—Ä–∏—Ç—ã: {user_data['dimensions']}\n"
        f"–ú–∞—Ä—à—Ä—É—Ç: {user_data['route']}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {user_data['contact']}"
    )

    if ADMIN_CHAT_ID:
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message)

    if BITRIX_WEBHOOK_URL:
        contact_id = create_contact(user_data)
        if contact_id:
            create_deal(contact_id, user_data)

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    return ConversationHandler.START

def create_contact(data):
    contact_payload = {
        "fields": {
            "NAME": data["name"],
            "PHONE": [{"VALUE": data["contact"], "VALUE_TYPE": "WORK"}],
            "COMMENTS": f"–ì—Ä—É–∑: {data['cargo']}\n–ì–∞–±–∞—Ä–∏—Ç—ã: {data['dimensions']}\n–ú–∞—Ä—à—Ä—É—Ç: {data['route']}\nTelegram: {data['tg_name']} ({data['tg_username']})"
        }
    }
    try:
        response = requests.post(f"{BITRIX_WEBHOOK_URL}/crm.contact.add.json", json=contact_payload)
        if response.status_code == 200:
            return response.json().get("result")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
    return None

def create_deal(contact_id, data):
    deal_payload = {
        "fields": {
            "TITLE": f"–ü–µ—Ä–µ–≤–æ–∑–∫–∞: {data['route']}",
            "CONTACT_ID": contact_id,
            "COMMENTS": f"–ì—Ä—É–∑: {data['cargo']}\n–ì–∞–±–∞—Ä–∏—Ç—ã: {data['dimensions']}\n–ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}\nTelegram: {data['tg_name']} ({data['tg_username']})",
            "STAGE_ID": "NEW"
        }
    }
    try:
        response = requests.post(f"{BITRIX_WEBHOOK_URL}/crm.deal.add.json", json=deal_payload)
        return response.status_code == 200
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏: {e}")
    return False

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start), MessageHandler(filters.Regex("^–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É$"), name)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name)],
            CARGO: [MessageHandler(filters.TEXT & ~filters.COMMAND, cargo)],
            DIMENSIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, dimensions)],
            ROUTE: [MessageHandler(filters.TEXT & ~filters.COMMAND, route)],
            CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, contact)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
